diff --git a/node_modules/@types/yui/.37fe7fffef7facde-00000004.README.md b/.37fe7fffef7facde-00000004.README.md
new file mode 100644
index 0000000000000000000000000000000000000000..77d5edf58b92defe7901541efc8a65efe7f3f19e
--- /dev/null
+++ b/.37fe7fffef7facde-00000004.README.md
@@ -0,0 +1,15 @@
+# Installation
+> `npm install --save @types/yui`
+
+# Summary
+This package contains type definitions for yui (https://github.com/yui/yui3).
+
+# Details
+Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/yui.
+
+### Additional Details
+ * Last updated: Tue, 07 Nov 2023 15:11:36 GMT
+ * Dependencies: none
+
+# Credits
+These definitions were written by [Gia Bảo @ Sân Đình](https://github.com/giabao).
diff --git a/node_modules/@types/yui/.9ffe5f6fefb91ef4-00000005.yui-test.d.ts b/.9ffe5f6fefb91ef4-00000005.yui-test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..dd452aba83b935b949a3079289d0fd987f148d84
--- /dev/null
+++ b/.9ffe5f6fefb91ef4-00000005.yui-test.d.ts
@@ -0,0 +1,99 @@
+declare namespace YUITest {
+    interface YUITestStatic {
+        Assert: IAssert;
+        Case: TestCase;
+        Runner: TestRunner;
+    }
+
+    interface EventTarget {
+        attach(type: string, listener: Function): void;
+        subscribe(type: string, listener: Function): void;
+        fire(event: Object): void;
+        fire(event: string): void;
+        detach(type: string, listener: Function): void;
+        unsubscribe(type: string, listener: Function): void;
+    }
+
+    interface TestRunner extends EventTarget {
+        TEST_CASE_BEGIN_EVENT: string;
+        TEST_CASE_COMPLETE_EVENT: string;
+        TEST_SUITE_BEGIN_EVENT: string;
+        TEST_SUITE_COMPLETE_EVENT: string;
+        TEST_PASS_EVENT: string;
+        TEST_FAIL_EVENT: string;
+        ERROR_EVENT: string;
+        TEST_IGNORE_EVENT: string;
+        COMPLETE_EVENT: string;
+        BEGIN_EVENT: string;
+
+        getName(): string;
+        setName(name: string): void;
+
+        add(testObject: TestSuite): void;
+        add(testObject: TestCase): void;
+
+        clear(): void;
+        isWaiting(): boolean;
+        isRunning(): boolean;
+
+        getResults(format?: Function): any; // Object|String
+        getCoverage(format?: Function): any; // Object|String
+        callback(...args: any[]): Function;
+        resume(segment?: Function): void;
+        run(options?: Object): void;
+        run(options?: boolean): void;
+    }
+
+    interface TestSuite {
+        name: string;
+        //        items: any[] //Array of test suites and test cases. @private
+        add(testObject: TestSuite): void;
+        add(testObject: TestCase): void;
+        setUp(): void;
+        tearDown(): void;
+    }
+
+    interface TestCase {
+        new(template: Object): TestCase;
+        DEFAULT_WAIT: number;
+        callback(...args: any[]): Function;
+        resume(segment?: Function): void;
+        wait(segment?: Function, delay?: number): void;
+        waitFor(condition: Function, segment: Function, timeout?: number, increment?: number): void;
+        assert(condition: boolean, message: string): void;
+        fail(message?: string): void;
+        init(): void;
+        destroy(): void;
+        setUp(): void;
+        tearDown(): void;
+    }
+
+    interface IAssert {
+        fail(message?: string): void;
+        pass(message?: string): void;
+        areEqual(expected: Object, actual: Object, message?: string): void;
+        areNotEqual(unexpected: Object, actual: Object, message?: string): void;
+        areNotSame(unexpected: Object, actual: Object, message?: string): void;
+        areSame(expected: Object, actual: Object, message?: string): void;
+        isFalse(actual: Object, message?: string): void;
+        isTrue(actual: Object, message?: string): void;
+        isNaN(actual: Object, message?: string): void;
+        isNotNaN(actual: Object, message?: string): void;
+        isNotNull(actual: Object, message?: string): void;
+        isNotUndefined(actual: Object, message?: string): void;
+        isNull(actual: Object, message?: string): void;
+        isUndefined(actual: Object, message?: string): void;
+        isArray(actual: Object, message?: string): void;
+        isBoolean(actual: Object, message?: string): void;
+        isFunction(actual: Object, message?: string): void;
+        isInstanceOf(expected: Function, actual: Object, message?: string): void;
+        isNumber(actual: Object, message?: string): void;
+        isObject(actual: Object, message?: string): void;
+        isString(actual: Object, message?: string): void;
+        isTypeOf(expectedType: string, actualValue: Object, message?: string): void;
+
+        throwsError(expectedError: string, method: Object, message?: string): void;
+        throwsError(expectedError: Function, method: Object, message?: string): void;
+        throwsError(expectedError: Object, method: Object, message?: string): void;
+    }
+}
diff --git a/node_modules/@types/yui/.d7fe1e7fe8fbd7fa-00000001.index.d.ts b/.d7fe1e7fe8fbd7fa-00000001.index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2a20e00e8c0aa18a863a01a7cecdf6df0eaff629
--- /dev/null
+++ b/.d7fe1e7fe8fbd7fa-00000001.index.d.ts
@@ -0,0 +1,52 @@
+/// <reference path="yui-test.d.ts" />
+
+interface YUI {
+    Test: YUITest.YUITestStatic;
+    Assert: YUITest.IAssert;
+
+    add(name: string, fn: (Y: YUI, name: string) => any, version: string, details?: Y.IConfig): YUI;
+
+    mix(
+        receiver: Function,
+        supplier: Function,
+        overwrite?: boolean,
+        whitelist?: string[],
+        mode?: number,
+        merge?: boolean,
+    ): any; // Function|Object|YUI
+    mix(
+        receiver: Object,
+        supplier: Function,
+        overwrite?: boolean,
+        whitelist?: string[],
+        mode?: number,
+        merge?: boolean,
+    ): any; // Function|Object|YUI
+    mix(
+        receiver: Function,
+        supplier: Object,
+        overwrite?: boolean,
+        whitelist?: string[],
+        mode?: number,
+        merge?: boolean,
+    ): any; // Function|Object|YUI
+    mix(
+        receiver: Object,
+        supplier: Object,
+        overwrite?: boolean,
+        whitelist?: string[],
+        mode?: number,
+        merge?: boolean,
+    ): any; // Function|Object|YUI
+}
+
+declare namespace Y {
+    interface IConfig {
+        requires: string[];
+        optional: string[];
+        use: string[];
+    }
+}
+
+declare var Y: YUI;
+declare var YUI: YUI;
diff --git a/node_modules/@types/yui/.f7fe7f6ffffff870-00000003.package.json b/.f7fe7f6ffffff870-00000003.package.json
new file mode 100644
index 0000000000000000000000000000000000000000..a55e2975004551272be871665797f0c8f741ee3f
--- /dev/null
+++ b/.f7fe7f6ffffff870-00000003.package.json
@@ -0,0 +1,25 @@
+{
+    "name": "@types/yui",
+    "version": "3.14.31",
+    "description": "TypeScript definitions for yui",
+    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/yui",
+    "license": "MIT",
+    "contributors": [
+        {
+            "name": "Gia Bảo @ Sân Đình",
+            "githubUsername": "giabao",
+            "url": "https://github.com/giabao"
+        }
+    ],
+    "main": "",
+    "types": "index.d.ts",
+    "repository": {
+        "type": "git",
+        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
+        "directory": "types/yui"
+    },
+    "scripts": {},
+    "dependencies": {},
+    "typesPublisherContentHash": "2581192ed6855054cd505df663a09211203592ef3bb62913d7af4f62a64911a1",
+    "typeScriptVersion": "4.5"
+}
\ No newline at end of file
diff --git a/node_modules/@types/yui/.fffe7eebfafcf774-00000002.LICENSE b/.fffe7eebfafcf774-00000002.LICENSE
new file mode 100644
index 0000000000000000000000000000000000000000..9e841e7a26e4eb057b24511e7b92d42b257a80e5
--- /dev/null
+++ b/.fffe7eebfafcf774-00000002.LICENSE
@@ -0,0 +1,21 @@
+    MIT License
+
+    Copyright (c) Microsoft Corporation.
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to deal
+    in the Software without restriction, including without limitation the rights
+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+    copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in all
+    copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+    SOFTWARE
diff --git a/index.d.ts b/index.d.ts
index 2a20e00e8c0aa18a863a01a7cecdf6df0eaff629..aac0205b020dd8f619cd3756deb9f895caeda4a1 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -1,6 +1,6 @@
 /// <reference path="yui-test.d.ts" />
 
-interface YUI {
+export interface YUI {
     Test: YUITest.YUITestStatic;
     Assert: YUITest.IAssert;
 
@@ -38,6 +38,10 @@ interface YUI {
         mode?: number,
         merge?: boolean,
     ): any; // Function|Object|YUI
+
+    use(...args: [...deps: string[], ...[callback: (Y: YUI) => void]]): YUI;
+
+    applyConfig(config: Y.IConfig): void;
 }
 
 declare namespace Y {
