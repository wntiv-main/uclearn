:root:root:root:root:root:root:root:root {
	#quiz-timer-wrapper {
		pointer-events: none;

		> * {
			pointer-events: all;
		}

		#quiz-timer {
			background-color: var(--uclearn-translucent-bg);
			border-radius: var(--uclearn-radius);
			border: none;
			align-content: center;
		}
	}

	.que,
	.que .correctness.badge {
		--uclearn-accent-color: #808080;

		&.correct {
			--uclearn-accent-color: var(--uclearn-color-success);
		}

		&.partiallycorrect {
			--uclearn-accent-color: var(--uclearn-color-warning);
		}

		&.incorrect,
		&.notanswered {
			--uclearn-accent-color: var(--uclearn-color-error);
		}
	}

	.automatic-completion-conditions .badge {
		--uclearn-accent-color: var(--uclearn-translucent-bg);
		color: inherit;
		background-color: color-mix(
			in srgb,
			var(--uclearn-accent-color) 20%,
			var(--uclearn-translucent-bg) 80%
		);
		mix-blend-mode: normal;
		padding: 0.4rem 1ch;
		line-height: 1.2em;

		&.alert-success {
			--uclearn-accent-color: var(--uclearn-color-success);
		}
	}

	.activity-dates {
		display: grid;
		grid-auto-flow: column;
		grid-auto-columns: max-content;
		column-gap: 1ch;

		> div {
			display: contents;
		}

		strong {
			grid-column: 1;
			justify-self: end;
		}
	}

	.que {
		padding: 0;
		margin: 0;

		> .info .state {
			color: color-mix(
				in srgb,
				var(--uclearn-accent-color) 30%,
				var(--uclearn-foreground)
			);
		}

		.formulation,
		.outcome,
		.comment,
		.specificfeedback,
		.generalfeedback,
		.numpartscorrect,
		.rightanswer,
		.im-feedback,
		.feedback,
		.coderunnerexamples,
		p {
			margin: 0;
		}

		.content img:not([width], [height]) {
			max-width: 100%;
			width: auto;
			height: auto;
		}

		.stackprtfeedback .fa {
			vertical-align: middle;
		}

		.coderunner-examples {
			margin-block: 0.5rem 0;
		}

		.prompt {
			margin-block: 0.5rem;
		}

		.table-responsive,
		.coderunner-examples {
			width: auto;
			max-width: 100%;
		}

		.coderunner-test-results {
			padding: 0;
			background: transparent;
		}

		.cr-test-table-div {
			background-color: transparent;
			padding: 0;

			table {
				height: 1px;
				display: table;
			}

			tr {
				height: 100%;
			}

			td:has(> :is(textarea, input):only-child) {
				padding: 0;
				height: 100%;

				> :is(textarea, input) {
					background-color: transparent;
					field-sizing: content;
					display: block;
					border: none;
					padding: 0.3rem;
					min-height: 100%;
					resize: none !important;
				}
			}
		}

		.outcome,
		.comment {
			margin: 0;
			padding: calc(var(--uclearn-radius) - 0.2em) var(--uclearn-radius);
			border-radius: var(--uclearn-radius);
			color: inherit;
			background-color: color-mix(
				in srgb,
				var(--uclearn-accent-color) 10%,
				var(--uclearn-translucent-bg) 90%
			);
			width: fit-content;
			max-width: 100%;
			margin-inline: auto;

			.correctness.badge {
				padding: 0.1em 0.8ch 0.3em;
				color: var(--uclearn-foreground);
				background-color: color-mix(
					in srgb,
					var(--uclearn-accent-color) 50%,
					var(--uclearn-background) 50%
				);
			}
		}

		/* TODO: proper fix for nested background containers */
		.outcome:has(> .feedback > .stackprtfeedback:only-child):not(
				:has(> :not(.accesshide, .feedback:only-of-type))
			) {
			padding: 0;
			border-radius: 0;
			background-color: transparent;
		}

		.content {
			border-radius: var(--uclearn-radius);
			padding: calc(0.5 * var(--uclearn-radius));
			background-color: var(--uclearn-translucent-bg);
			margin-bottom: 1rem;
		}

		.answer .specificfeedback {
			border: 1px solid currentColor;
			border-radius: var(--uclearn-radius);
			padding: calc(var(--uclearn-radius) / 2);
			margin-inline: 1ch;
		}

		&.stack :is(.matrixsquarebrackets, .matrixroundbrackets) {
			border-color: currentColor;
		}

		&.stack .matrixsquarebrackets {
			background-image: linear-gradient(currentColor, currentColor),
				linear-gradient(currentColor, currentColor),
				linear-gradient(currentColor, currentColor),
				linear-gradient(currentColor, currentColor);
		}

		&:has(table) {
			overflow: clip;

			table {
				display: block;
				overflow-x: auto;
				max-width: fit-content;
			}
		}

		.qtext {
			margin: 0;
		}

		.im-controls:not(:has(> :not(input[type="hidden"]))) {
			margin: 0;
		}
	}

	.que .content {
		margin-left: 0;
	}

	.que .info {
		background-color: transparent;
		border: solid currentColor;
		border-width: 0 0 1px 1px;
		border-radius: 0 var(--uclearn-radius);
		margin: 0 0 1ch 1ch;
		padding: var(--uclearn-radius);
		float: inline-end;
		text-align: end;
		z-index: 10;
		width: max-content;
		position: sticky;
		top: var(--uclearn-nav-height);
	}

	.stack-hint {
		background-color: transparent;
		border: none;
	}

	pre:has(> [id^="stack-iframe-holder-"]) {
		display: flex;
		margin: 0.5rem;
		overflow: hidden;
	}

	.ddarea {
		img {
			padding: 0 !important;
			object-fit: contain;
			object-position: center;
			max-width: none !important;
		}
	}

	.stackprtfeedback {
		--uclearn-accent-color: #808080;
		margin: 0.2rem 1ch;
		background-color: color-mix(
			in srgb,
			var(--uclearn-accent-color) 10%,
			var(--uclearn-translucent-bg) 90%
		);
		border-radius: var(--uclearn-radius);
		padding: calc(var(--uclearn-radius) / 2);
		padding-top: 0;

		&:has(> .correct) {
			--uclearn-accent-color: var(--uclearn-color-success);
		}

		&:has(> .partiallycorrect) {
			--uclearn-accent-color: var(--uclearn-color-warning);
		}

		&:has(> .incorrect, > .notanswered) {
			--uclearn-accent-color: var(--uclearn-color-error);
		}
	}

	.path-mod-assign {
		.submissionstatus,
		.submissionstatusdraft,
		.submissionnotgraded {
			color: inherit;
			background-color: color-mix(
				in srgb,
				var(--uclearn-color-warning) 10%,
				var(--uclearn-translucent-bg)
			);
		}

		.submissionstatussubmitted,
		.submissiongraded,
		.earlysubmission {
			color: inherit;
			background-color: color-mix(
				in srgb,
				var(--uclearn-color-success) 10%,
				var(--uclearn-translucent-bg)
			);
		}

		.submissionlocked,
		.submissionreopened,
		.latesubmission,
		.gradingreminder {
			color: inherit;
			background-color: color-mix(
				in srgb,
				var(--uclearn-color-error) 10%,
				var(--uclearn-translucent-bg)
			);
		}
	}

	.gradingform_rubric {
		max-width: 100%;

		.criterion {
			border: none;
		}

		.criterion .score {
			color: color-mix(
				in srgb,
				var(--uclearn-color-success) 30%,
				var(--uclearn-foreground)
			);
		}

		.criterion td {
			background: transparent;
		}

		.criterion.even {
			background-color: var(--uclearn-hover-tint);
		}

		/* .gradingform_rubric .criterion .description {
			min-width: 150px;
			font-weight: 700
		} */

		.criterion .levels .level {
			/* border-left: 1px solid #ddd; */
			/* max-width: 150px */
			border-color: currentColor;

			&.currentchecked {
				background: color-mix(
					in srgb,
					var(--uclearn-color-complete) 10%,
					var(--uclearn-translucent-bg)
				);
			}

			&.checked {
				background-color: color-mix(
					in srgb,
					var(--uclearn-color-success) 10%,
					var(--uclearn-translucent-bg)
				);
				border-block: none;
			}
		}

		/* .gradingform_rubric .criterion .levels .level .level-wrapper {
			position: relative
		}

		.gradingform_rubric .criterion .levels .level.last {
			border-right: 1px solid #ddd
		} */
	}

	.ln-important-box,
	.ln-important-box-definition {
		border-color: currentColor;
	}

	.ln-optional {
		background-color: var(--uclearn-hover-tint);
		border-radius: var(--uclearn-radius);
	}

	.ln-prob-multi-exp-container {
		background-color: transparent;
		border-color: currentColor;
		border-radius: var(--uclearn-radius);
		padding: calc(var(--uclearn-radius) / 2);
	}

	.ln-prob-success,
	.ln-prob-failure {
		color: color-mix(
			in srgb,
			var(--uclearn-accent-color) 40%,
			var(--uclearn-foreground)
		);
		border-color: currentColor;

		&.ln-prob-success {
			--uclearn-accent-color: var(--uclearn-color-success);
		}

		&.ln-prob-failure {
			--uclearn-accent-color: var(--uclearn-color-error);
		}
	}
}
